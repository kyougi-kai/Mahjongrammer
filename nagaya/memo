const errorTemplete = {
    part: "",
    index: 0,
    type: "",
    reason: "",
    suggestion: ""
};

 let GCR = {
        success:true,------successesのすべてにtrueが含まれているならtrue,そうでなければfalse
        successes:[],------S,Vなど　trueならばtrueを入れる
        currentType:[],
        currentTypeNum:0,
        currentIndex:0,
        flagsNum:0,
        temporaryWordsNum:0,
        message:"",
        errors:{},
        '100': {
            kansi: [],----冠詞のタグをいれる　
            zentiKeiyousi: [],
            meisi: [],
            koutiKeiyousi: [],---
            wordsCount: 0,----ここがtrueNumと等しいならばtrueを返す
            targetIndex: 0----現在読み込んでいる部分の添え字
        },
    };


const testGCR = {
    success: false,
    successes: { S: [], V: [] },
    currentType: ['S', 'V'],
    currentTypeNum: 0,
    currentIndex: 0,
    flagsNum: 100,
    temporaryWordsNum: 0,
    message: '',
    errors: {},
};
GCR.currentType[GCR.currentTypeNum]（今のタイプ「S,V,O、C」）
GCR.flags.targetIndex（今の添え字）

tango[targetSentence[GCR.flags.targetIndex]].tags

GCR.flags.wordsCount += true_M_Num;
        GCR.flags.targetIndex += 1;

        let keyName = GCR.currentType[GCR.currentTypeNum] + "ZentiKeiyousi"
            GCR.errors.push({[keyName]:errorTemplete});
            GCR.errors[keyName].part = GCR.currentType[GCR.currentTypeNum];
            GCR.errors[keyName].index = currentIndex;
            GCR.errors[keyName].type = "名詞修飾ミス！";
            GCR.errors[keyName].reason = "修飾のやり方が間違っています";
            GCR.errors[keyName].suggestion = "";


 GCR[GCR.flagsNum] = {kansi:[],zentiKeiyousi:[],meisi:[],koutiKeiyousi:[],wordsCount:0,targetIndex:0};

 kansi,meisi等にはtagsを入れ、単数/複数や三単現Sの判定を行う

 テストケース

 現状・・・名詞は冠詞がなくとも通る


checkMeisiGrammerMatters{
    単数/複数の判定
    三単現Sの判定を行う
    冠詞オンリーでもとおってしまう→冠詞オンリーでは通らないようにする
    冠詞があれば、名詞は単数/複数の判定を行う
    冠詞がなければ、名詞は単数/複数の判定を行う
}

checkVテストケース

["can","run"]...true
["can",[""],""]

次回・・・動詞の登録、checkMeisiGrammerMattersの設計、プログラミング、errorManeger

errorManeger・・・エラーを一元的に管理する関数　エラーを



